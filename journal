Will need to pull all my journal entries into this document. 

A commit from local git laptop





Class Javascript vars functions and gates (Not sure which week) <-- need to org

This class we talked about logic gates functions and variables
You call a function by its name 
function myFunction(){
    console.log("Message");
}

myFunction() <--- this is calling the function

we also talked about association and reserved words in Javascript
function addition(a,b) for example
const doesnt change let can

Ali also talked about our wireframes and website.

talked about order of which the variables are added as the program runs
asynchronous order

installed npm package twit to follow a tutorial on adding outside module and creating a package.json file 
Commands used

npm init
npm install twit --save

I also uninstalled the package as i forgot to add the save tag so tha tis usefull

npm -h <-- used to find the unistall commands
 
***TwitterApp***

Created a twitter bot that posts custom search tweets to a twitter account i created. in the TwitterApp folder

***Class Wednesday 14th aug ***
installed express and looking into importing node modules into our temp projects with npm and express defualt project templates

***Project Wireframe and Idea***
I have created a wireframe inside ./WireframeImgs/ that sets out the template css design and colour pallete that will be used in the project. 
This template will be consistant throughout the website having the content area adjusted for columns to accomodate the different pages in the website.

The idea for the website is to build custom api calls to different cryptocurrency platforms. I will have a series of drop down boxes 
selecting which platform to make a query on and then the different options to create a call to that api and display
 the output of that api call on screen, then a place to copy the code that was generated to make that call if the user wants to use it in another application. The basic summary is a place to generate and create API calls to a selection of platforms for the user to customise.

Additional refinement of the wireframes of each page will be added and a discussion with Ali about the technicalities involved in creating this project will be orgranised to confirm details


***Class 16/08/19***
each page has its on express logic behind it

Require
const require = require('express')

Middleware
To make sure the below understands what the code below is calling


app.use('table',function(req,res,next))

app.use('table'(req,res,next) =>{
var booking = req.booking
var age =  req.age
if (booking && age){
next();
}});

Routes
app.get('/table/:amount',function(req,res) =>+{
var dinner = req.params.amount
res.send('looking for table'+ dinner)
})

Params is looking like this 
req {params:{amount:4}}

FLOW OF PROGRAM

Customer -> Middleware -> Middleware -> Response
table 2 ->  booking,age->  table 4 ->  message''
     ^       app.use();    app.get()    res.send() |
     <----------------------------------------------

const express = require('express')
const tableRoute = express.Router()
tableRoute.use(function(req,res,next)){
    var booking = req.booking
    var age = req.age
    if(booking && age){
        next();
    }
}


// reusing tableRoute to apply the same rules to the Bar
tableRoute.use('/bar',function(req,res,next)){

    var age = req.age;
    if (age >= 18){
        next();
    }
}


Application
app.listen(3000){
    console.log('Running port 3000')
} <--listens on the port for requests

codeacademy react1 and 2
and look at gitbook updated


******************Website Breakdown and Meeting with Ali********************
Have discussed the project idea with ali and will start research on implementation
of the different main elements that are required to make it work.
Using an user interface to react with the input and output on the http request to the
api I can list the requirements of the query to the user and take the custom commands
from the form to inject into the url construction. 

Node.js has an libary called SuperAgent
which accepts the input of query() which I can use to pass custom calls to different APIs.
All though there are several different options available this one seems to fit the best
for my usecase.

I have installed this to my test directory to look around through the code and readme file
with the below module install command.

npm install superagent

const superagent = require('superagent');

superagent.get('https://api.nasa.gov/planetary/apod')
.query({ api_key: 'DEMO_KEY', date: '2017-08-02' })  <---- This is where the custom calls are made.
.end((err, res) => {
  if (err) { return console.log(err); }
  console.log(res.body.url);
  console.log(res.body.explanation);
});

This query can be run in browser to be tested in a section that displays output below 
where the user customises the API request and can save the query to their account for
returning users.

What would be great is to figure out a way in order to automatically handle any API that
is say added to the website by a user requesting to submit their api to be publically useable
and accessable in order to expand the websites API options immensley. (that may be outside
of the scope of this course though) 
****Possible identification of certain common api call and variable inputs will have to be looked into
aswell as how the url is constructed compared to other api applications

A user will be able to log into the website and access previous saved queries and export
thoughs queries externally for use elsewhere, maybe another application for example.

Using request Promise to access the CoinMarketCap API

npm install --save request
npm install --save request-promise

reuest must be installed first followed by request-promise

*********SandBox Node.js API request call for testing the account works**********

const rp = require('request-promise');
const requestOptions = {
    method: 'GET',
    uri: 'https://sandbox-api.coinmarketcap.com/v1/exchange/listings/latest',
    qs: {
        'start': '1',
        'limit': '2',
        'sort': 'volume_24h_adjusted',
        'sort_dir': 'desc'
    },
    headers: {
        'X-CMC_PRO_API_KEY': 'ec9fe84b-fe7c-4d71-8aea-154b9acc0bca'
    },
    json: true,
    gzip: true
};

rp(requestOptions).then(response => {
    console.log('API call response:', response);
}).catch((err) => {
    console.log('API call error:', err.message);
});

********RUN AND RETURN RESULTS*******

$ node coinMarketCapAPI.js
API call response: { status:
   { timestamp: '2019-08-16T13:23:44.103Z',
     error_code: 0,
     error_message: null,
     elapsed: 7,
     credit_count: 0 },
  data: [] }